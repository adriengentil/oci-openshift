variant: openshift
version: 4.14.0
metadata:
  name: 00-master-oci-configure-secondary-nic
  labels:
    machineconfiguration.openshift.io/role: master
storage:
  files:
  - mode: 0755
    path: "/usr/local/bin/oci-configure-secondary-nic.sh"
    contents:
      inline: |
        #!/usr/bin/env bash
        
        set -e
        set -x
        
        chassis_asset_tag="$(dmidecode --string chassis-asset-tag)"
        if [ "${chassis_asset_tag}" != "OracleCloud.com" ]
        then
          echo "Not running in Oracle Cloud Infrastructure. Skipping."
          exit 0
        fi
        
        if [ ! -d "/sys/firmware/ibft" ]
        then
          echo "No IBFT configuration found. Skipping."
          exit 0
        fi
        
        MTU=9000
        NODEIP_CONF=/etc/systemd/system/kubelet.service.d/30-oci-nodeip.conf
        
        function get_if_name_from_mac_address {
          mac_address="${1}"
          ip -json link | jq --raw-output --arg mac_address "${mac_address}" '. | map(select(.address==($mac_address|ascii_downcase))) | .[].ifname'
        }
        
        # /opc/v2/vnics endpoint returns something that will look like the following
        # structure:
        # [
        #   {
        #     "macAddr": "00:10:e0:ec:72:fc",
        #     "nicIndex": 0,
        #     "privateIp": "10.0.29.201",
        #     "subnetCidrBlock": "10.0.16.0/20",
        #     "virtualRouterIp": "10.0.16.1",
        #     "vlanTag": 0,
        #     "vnicId": "ocid1.vnic.oc1.us-sanjose-1.abzwuljrppq34sbvgltddp7wujxwqw6xb7zjkwg54oaewx5mc4wr5cgtdzna"
        #   },
        #   {
        #     "macAddr": "00:10:e0:ec:72:fd",
        #     "nicIndex": 1,
        #     "privateIp": "10.0.32.210",
        #     "subnetCidrBlock": "10.0.32.0/20",
        #     "virtualRouterIp": "10.0.32.1",
        #     "vlanTag": 0,
        #     "vnicId": "ocid1.vnic.oc1.us-sanjose-1.abzwuljrsndaptsyq5mppfsoaqoun3gbvnpngcaspybo2nbpcmrozx25jenq"
        #   }
        # ]
        
        vnics=$(curl --silent -H "Authorization: Bearer Oracle" -L http://169.254.169.254/opc/v2/vnics/)
        secondary_if_mac_address=$(jq -r '.[1].macAddr' <<< "${vnics}")
        secondary_if_name=$(get_if_name_from_mac_address "${secondary_if_mac_address}")
        secondary_if_ip_address=$(jq -r '.[1].privateIp' <<< "${vnics}")
        secondary_if_default_gateway=$(jq -r '.[1].virtualRouterIp' <<< "${vnics}")
        secondary_if_subnet=$(jq -r '.[1].subnetCidrBlock' <<< "${vnics}")
        secondary_if_subnet_size=$(cut -f 2 -d '/' <<< "${secondary_if_subnet}")
        
        if [ ! -f "/etc/NetworkManager/system-connections/${secondary_if_name}.nmconnection" ]
        then
          nmcli connection add con-name "${secondary_if_name}" ifname "${secondary_if_name}" type ethernet ip4 "${secondary_if_ip_address}/${secondary_if_subnet_size}" gw4 "${secondary_if_default_gateway}"
          nmcli connection modify "${secondary_if_name}" ethernet.mtu ${MTU}
          nmcli connection modify "${secondary_if_name}" ipv4.route-metric 0 # make this interface the default interface
          nmcli connection modify "${secondary_if_name}" connection.autoconnect true
        
          nmcli connection reload
          nmcli connection up "${secondary_if_name}"
        fi

        if [ ! -f "${NODEIP_CONF}" ]
        then
          cat > "${NODEIP_CONF}" << EOF
        [Service]
        Environment="KUBELET_NODE_IP=${secondary_if_ip_address}"
        EOF
        fi
        
        # This configuration is now permanent, we don't need to execute it on
        # next boot
        systemctl disable oci-configure-secondary-nic.service
systemd:
  units:
  - name: oci-configure-secondary-nic.service
    enabled: true
    contents: |
      [Unit]
      Description=Configure secondary NIC on OCI
      After=NetworkManager.service
      Before=ovs-configuration.service kubelet.service

      [Service]
      ExecStart=/usr/local/bin/oci-configure-secondary-nic.sh
      Type=oneshot
      RemainAfterExit=yes
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target
